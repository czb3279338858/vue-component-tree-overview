const routes = [{ "path": "/options-component", "component": { "template": { "template": "<template>", "type": "VElement", "comment": "", "children": [{ "template": "<div>", "type": "VElement", "attributes": [{ "keyName": "class", "valueName": "tw-p-2", "valueType": "VLiteral" }, { "keyName": ":class", "valueName": "dataA", "valueType": "Identifier" }, { "keyName": ":attr-a", "valueName": "getAttrB1(getAttrB2(dataA))", "valueType": "CallExpression", "callNames": ["getAttrB1", "getAttrB2"], "callParams": ["dataA"] }, { "keyName": ":attr-c", "valueName": "dataB.a", "valueType": "MemberExpression" }, { "keyName": ":attr-d", "valueName": "myClass | filterA | filterB", "valueType": "VFilterSequenceExpression", "callNames": ["filterB", "filterA"], "callParams": ["myClass"] }], "comment": "", "children": [{ "template": "{{ dataA | filterA }}", "callNames": ["filterA"], "type": "VFilterSequenceExpression", "comment": "", "value": "dataA | filterA", "callParams": ["dataA"] }, { "template": "{{ dataA }}", "type": "Identifier", "comment": "", "value": "dataA" }, { "template": "{{ dataB.a }}", "type": "MemberExpression", "comment": "", "value": "dataB.a" }, { "template": "{{ getAttrB1(getAttrB2(dataA, dataB)) }}", "callNames": ["getAttrB1", "getAttrB2"], "type": "CallExpression", "comment": "", "value": "getAttrB1(getAttrB2(dataA, dataB))", "callParams": ["dataA", "dataB"] }, { "template": "\" 我是字符串 \"", "type": "VText", "comment": "" }, { "template": "<div>", "type": "VElement", "attributes": [{ "keyName": "v-if", "valueName": "dataA", "valueType": "Identifier" }], "comment": "", "children": [{ "template": "\"v-if\"", "type": "VText", "comment": "" }] }, { "template": "<div>", "type": "VElement", "attributes": [{ "keyName": "v-else-if", "valueName": "dataB.a", "valueType": "MemberExpression" }], "comment": "", "children": [{ "template": "\"v-else-if\"", "type": "VText", "comment": "" }] }, { "template": "<div>", "type": "VElement", "attributes": [{ "keyName": "v-else" }], "comment": "", "children": [{ "template": "\"v-else\"", "type": "VText", "comment": "" }] }, { "template": "<div>", "type": "VElement", "attributes": [{ "keyName": "v-for", "valueName": "(dataB, key, index) in dataA", "valueType": "VForExpression", "scopeNames": ["dataB", "key", "index"], "vForName": "dataA" }, { "keyName": ":key", "valueName": "index", "valueType": "Identifier" }], "comment": "", "children": [{ "template": "{{ dataB }}", "type": "Identifier", "comment": "", "value": "dataB" }] }, { "template": "<div>", "type": "VElement", "attributes": [{ "keyName": "v-for", "valueName": "({ a }, key, index) in dataA", "valueType": "VForExpression", "scopeNames": ["a", "key", "index"], "vForName": "dataA" }, { "keyName": ":key", "valueName": "index", "valueType": "Identifier" }], "comment": "", "children": [{ "template": "{{ a }}", "type": "Identifier", "comment": "", "value": "a" }] }, { "template": "<div>", "type": "VElement", "attributes": [{ "keyName": "v-for", "valueName": "([a], key, index) in dataA", "valueType": "VForExpression", "scopeNames": ["a", "key", "index"], "vForName": "dataA" }, { "keyName": ":key", "valueName": "index", "valueType": "Identifier" }], "comment": "", "children": [{ "template": "{{ a }}", "type": "Identifier", "comment": "", "value": "a" }] }, { "template": "<slot>", "type": "VElement", "attributes": [{ "keyName": "name", "valueName": "slotA", "valueType": "VLiteral" }], "comment": "" }, { "template": "<slot>", "type": "VElement", "attributes": [{ "keyName": "name", "valueName": "slotB", "valueType": "VLiteral" }, { "keyName": ":slotValueA", "valueName": "dataA", "valueType": "Identifier" }, { "keyName": ":slotValueB", "valueName": "dataB", "valueType": "Identifier" }], "comment": "" }, { "template": "<div>", "type": "VElement", "attributes": [{ "keyName": "slot", "valueName": "slotA", "valueType": "VLiteral" }], "comment": "" }, { "template": "<div>", "type": "VElement", "attributes": [{ "keyName": "slot", "valueName": "slotB", "valueType": "VLiteral" }, { "keyName": "slot-scope", "valueName": "scope", "valueType": "VSlotScopeExpression", "scopeNames": ["scope"] }], "comment": "", "children": [{ "template": "{{ scope }}", "type": "Identifier", "comment": "", "value": "scope" }] }, { "template": "<div>", "type": "VElement", "attributes": [{ "keyName": "slot", "valueName": "slotC", "valueType": "VLiteral" }, { "keyName": "slot-scope", "valueName": "{ slotValueA }", "valueType": "VSlotScopeExpression", "scopeNames": ["slotValueA"] }], "comment": "", "children": [{ "template": "{{ slotValueA }}", "type": "Identifier", "comment": "", "value": "slotValueA" }] }, { "template": "<template>", "type": "VElement", "attributes": [{ "keyName": "v-slot:slotD" }], "comment": "", "children": [{ "template": "<div>", "type": "VElement", "comment": "", "children": [{ "template": "\"slotD\"", "type": "VText", "comment": "" }] }] }, { "template": "<template>", "type": "VElement", "attributes": [{ "keyName": "v-slot:slotE", "valueName": "scope", "valueType": "VSlotScopeExpression", "scopeNames": ["scope"] }], "comment": "", "children": [{ "template": "<div>", "type": "VElement", "comment": "", "children": [{ "template": "{{ scope }}", "type": "Identifier", "comment": "", "value": "scope" }] }] }, { "template": "<template>", "type": "VElement", "attributes": [{ "keyName": "v-slot:slotF", "valueName": "{ slotValueA }", "valueType": "VSlotScopeExpression", "scopeNames": ["slotValueA"] }], "comment": "", "children": [{ "template": "<div>", "type": "VElement", "comment": "", "children": [{ "template": "{{ slotValueA }}", "type": "Identifier", "comment": "", "value": "slotValueA" }] }] }, { "template": "<class-component>", "type": "VElement", "comment": "" }, { "template": "<router-view>", "type": "VElement", "comment": "" }] }] }, "propMap": { "propA": { "name": "propA", "defaultValue": "() => { return \"propADefault\"; }", "type": ["String"], "isRequired": true, "comment": " propA 注释" }, "propB": { "name": "propB", "type": ["Number"], "comment": " propB 注释" }, "propC": { "name": "propC", "type": ["Number", "String"], "comment": " propC 注释" } }, "setupMap": { "setupA": { "name": "setupA", "comment": " setupA注释2\n setupA注释1" } }, "provideMap": { "provideA": { "name": "provideA", "nameType": "Literal", "value": "provideAFrom", "valueType": "Identifier", "comment": " provideA注释" } }, "lifecycleHookMap": { "mounted": { "name": "mounted", "comment": " 生命周期注释" } }, "filterMap": { "filterA": { "name": "filterA", "comment": " filterA注释" }, "filterB": { "name": "filterB", "comment": " filterB注释，来源于组件\n filterB注释，来源于定义" }, "filterC": { "name": "filterC", "comment": " filterC注释，来源于组件" }, "filterD": { "name": "filterD", "comment": " filterD注释，来源于组件" }, "filterDefault": { "name": "filterDefault", "comment": "", "importValue": {} }, "filterF": { "name": "filterF", "comment": "" }, "filterE": { "name": "filterE", "comment": "" }, "filterF2": { "name": "filterF2", "comment": "" } }, "computedMap": { "computedA": { "name": "computedA", "comment": "all: computedA 注释", "computedComment": "get: computedA getter 注释\nset: computedA setter 注释" }, "computedB": { "name": "computedB", "comment": "all: computedB 注释" } }, "emitMap": { "emitB": { "name": "emitB", "type": [["String"], ["Number"]], "comment": " emitB注释2\n emitB注释1", "paramsVerify": "emitB(emitValueA: string | number, emitValueB) { return typeof emitValueA === \"string\" && emitValueB; }" }, "emitC": { "name": "emitC", "type": [["Object"]], "comment": " emitC注释2\n emitC注释1", "paramsVerify": "emitC({ emitValueA, emitValueB }) { return typeof emitValueA === \"string\" && emitValueB; }" }, "emitA": { "name": "emitA", "comment": " emitA注释" } }, "dataMap": { "dataA": { "name": "dataA", "comment": " dataA 注释" }, "dataA.a": { "name": "dataA.a", "comment": " dataA 注释\n data是对象递归的注释" }, "dataB": { "name": "dataB", "comment": " dataB 注释" }, "dataB.a": { "name": "dataB.a", "comment": " dataB 注释\n 初始化函数中的注释" }, "provideSymbolFrom": { "name": "provideSymbolFrom", "comment": " provideSymbolFrom，来源于 data" }, "provideSymbolFrom.a": { "name": "provideSymbolFrom.a", "comment": " provideSymbolFrom，来源于 data" }, "provideAFrom": { "name": "provideAFrom", "comment": " provideA注释，来源于 data" } }, "methodMap": { "methodA": { "name": "methodA", "comment": " methodA注释" }, "getAttrB1": { "name": "getAttrB1", "comment": " getAttrB1 注释" }, "getAttrB2": { "name": "getAttrB2", "comment": " getAttrB2 注释" } }, "injectMap": { "injectA": { "name": "injectA", "from": "\"injectAFrom\"", "fromType": "Literal", "defaultValue": "() => [\"injectADefault\"]", "comment": " injectA注释" }, "injectB": { "name": "injectB", "from": "injectSymbol", "fromType": "Identifier", "comment": " injectB注释" } }, "name": "option-component-name", "modelOptionMap": { "prop": "value", "event": "input" }, "extend": {}, "componentMap": { "\"class-component\"": { "template": { "template": "<template>", "type": "VElement", "comment": "", "children": [{ "template": "<div>", "type": "VElement", "comment": "", "children": [{ "template": "\"class-component\"", "type": "VText", "comment": "" }] }] }, "propMap": { "value": { "name": "value", "defaultValue": "\"default\"", "type": ["String"], "isRequired": true, "comment": " VModel注释1\n prop:{value:{default:'default',type:String,isRequired:true}}\n computed:{computedValue:{get:this.value,set:val=>this.$emit('input',val)}}" }, "propA": { "name": "propA", "type": ["Number"], "isRequired": true, "comment": " PropA注释1\n PropA注释2" }, "propB": { "name": "propB", "type": ["Number"], "isRequired": true, "comment": " PropB注释1\n PropB注释2" }, "propC": { "name": "propC", "type": ["Number"], "isRequired": false, "comment": " PropC注释1\n {isRequired:false,type:Number}" }, "propD": { "name": "propD", "type": ["Array"], "isRequired": true, "comment": " {type:Array}" }, "propE": { "name": "propE", "type": ["Object"], "isRequired": true, "comment": " {type:Object}" }, "propF": { "name": "propF", "defaultValue": "() => { return []; }", "type": ["Array"], "isRequired": true, "comment": "" }, "propG": { "name": "propG", "defaultValue": "() => { return []; }", "type": ["Array"], "isRequired": true, "comment": " ModelSync注释1\n props:[propG]\n computed:{computedPropG:{get:this.propG,set:val=>this.$emit('change-g',val)}" }, "propH": { "name": "propH", "defaultValue": "() => { return []; }", "type": ["Array"], "isRequired": true, "comment": " Model注释1\n mode:{prop:'propH',event:'changeH'}\n props:{propH:{default:()=>[],type:Array,isRequired:true}}" } }, "provideMap": { "provideA": { "name": "provideA", "nameType": "Identifier", "value": "provideA", "valueType": "Identifier", "comment": " provideA注释1" }, "provideBName": { "name": "provideBName", "nameType": "Identifier", "value": "provideB", "valueType": "Identifier", "comment": " provideB注释1" }, "provideName": { "name": "provideName", "nameType": "Identifier", "value": "provideReactiveA", "valueType": "Identifier", "comment": " ProvideReactiveA注释" } }, "lifecycleHookMap": { "mounted": { "name": "mounted", "comment": " 生命周期" } }, "computedMap": { "computedA": { "name": "computedA", "comment": "get: computedA注释 get", "computedComment": "set: computedA注释 set" }, "computedPropA": { "name": "computedPropA", "comment": "all: PropSync注释1\n props:{propA:{default:0,type:Number,isRequired:true}}\n computed:{computedPropA:{get:this.propA,set:val=>this.$emit('update:propA',val)}}" }, "computedPropG": { "name": "computedPropG", "comment": "all: ModelSync注释1\n props:[propG]\n computed:{computedPropG:{get:this.propG,set:val=>this.$emit('change-g',val)}" } }, "emitMap": { "\"emit-a\"": { "name": "emit-a", "type": [["Number"], ["String"], ["String", "Number"], []], "comment": " emitA注释1\n emit('emit-a',10,n,m,o)\n emit('emit-a',Number,String,[String,Number],undefined)" }, "\"emit-b\"": { "name": "emit-b", "comment": " emitB注释1\n emit('emit-b')" }, "\"emit-c\"": { "name": "emit-c", "type": [["Number"]], "comment": " emitC注释1\n emit('emit-c',Number)" }, "\"emit-d\"": { "name": "emit-d", "type": [[], []], "comment": " emitD注释1\n emit('emit-d',e.target.value,e)\n emit('emit-d',undefined,undefined)" }, "input": { "name": "input", "type": [["String"]], "comment": " VModel注释1\n prop:{value:{default:'default',type:String,isRequired:true}}\n computed:{computedValue:{get:this.value,set:val=>this.$emit('input',val)}}" }, "\"update:propA\"": { "name": "\"update:propA\"", "type": [["Number"]], "comment": " PropSync注释1\n props:{propA:{default:0,type:Number,isRequired:true}}\n computed:{computedPropA:{get:this.propA,set:val=>this.$emit('update:propA',val)}}" }, "changeG": { "name": "changeG", "type": [["Array"]], "comment": " ModelSync注释1\n props:[propG]\n computed:{computedPropG:{get:this.propG,set:val=>this.$emit('change-g',val)}" } }, "dataMap": { "dataA": { "name": "dataA", "comment": " dataA注释" }, "provideA": { "name": "provideA", "comment": " data provideA\n provide:{provideA:this.provideA}" }, "provideB": { "name": "provideB", "comment": " data provideB\n provide:{provideBName:this.provideB}" }, "provideReactiveA": { "name": "provideReactiveA", "comment": " data:{provideReactiveA:'provideReactiveA'},provide:{provideName:this.provideReactiveA}" } }, "methodMap": { "methodA": { "name": "methodA", "comment": " methodA 注释" } }, "injectMap": { "injectA": { "name": "injectA", "from": "injectA", "fromType": "Literal", "comment": " InjectA注释1\n inject:{injectA:'injectA'}" }, "injectB": { "name": "injectB", "from": "\"injectBFrom\"", "fromType": "Literal", "defaultValue": "\"injectBDefault\"", "comment": " InjectB注释1\n inject:{injectB:{from:'injectBFrom',default:'injectBDefault'}}" }, "injectC": { "name": "injectC", "from": "\"injectCName\"", "fromType": "Literal", "comment": " InjectC注释1\n inject:{injectC:'injectCName'}" }, "injectD": { "name": "injectD", "from": "symbol", "fromType": "Identifier", "comment": " InjectD注释1\n inject:{injectD:symbol}" }, "injectReactiveA": { "name": "injectReactiveA", "from": "injectReactiveA", "fromType": "Literal", "comment": " InjectReactiveA注释\n inject:{injectReactiveA:'InjectReactiveAFrom'}" }, "injectReactiveB": { "name": "injectReactiveB", "from": "\"InjectReactiveBFrom\"", "fromType": "Literal", "comment": " InjectReactiveB注释\n inject:{injectReactiveB:'InjectReactiveBFrom'}" }, "injectReactiveC": { "name": "injectReactiveC", "from": "\"InjectReactiveCFrom\"", "fromType": "Literal", "defaultValue": "() => \"1\"", "comment": " InjectReactiveC注释\n inject:{injectReactiveC:{from:'InjectReactiveCFrom',default:()=>1}}}" } }, "modelOptionMap": { "prop": "propH", "event": "changeH" }, "mixinSet": [{ "modelOptionMap": { "prop": "value", "event": "input" } }] } }, "mixinSet": [null, {}] }, "children": [{ "path": "class-component", "name": "ClassComponent", "component": { "template": { "template": "<template>", "type": "VElement", "comment": "", "children": [{ "template": "<div>", "type": "VElement", "comment": "", "children": [{ "template": "\"class-component\"", "type": "VText", "comment": "" }] }] }, "propMap": { "value": { "name": "value", "defaultValue": "\"default\"", "type": ["String"], "isRequired": true, "comment": " VModel注释1\n prop:{value:{default:'default',type:String,isRequired:true}}\n computed:{computedValue:{get:this.value,set:val=>this.$emit('input',val)}}" }, "propA": { "name": "propA", "type": ["Number"], "isRequired": true, "comment": " PropA注释1\n PropA注释2" }, "propB": { "name": "propB", "type": ["Number"], "isRequired": true, "comment": " PropB注释1\n PropB注释2" }, "propC": { "name": "propC", "type": ["Number"], "isRequired": false, "comment": " PropC注释1\n {isRequired:false,type:Number}" }, "propD": { "name": "propD", "type": ["Array"], "isRequired": true, "comment": " {type:Array}" }, "propE": { "name": "propE", "type": ["Object"], "isRequired": true, "comment": " {type:Object}" }, "propF": { "name": "propF", "defaultValue": "() => { return []; }", "type": ["Array"], "isRequired": true, "comment": "" }, "propG": { "name": "propG", "defaultValue": "() => { return []; }", "type": ["Array"], "isRequired": true, "comment": " ModelSync注释1\n props:[propG]\n computed:{computedPropG:{get:this.propG,set:val=>this.$emit('change-g',val)}" }, "propH": { "name": "propH", "defaultValue": "() => { return []; }", "type": ["Array"], "isRequired": true, "comment": " Model注释1\n mode:{prop:'propH',event:'changeH'}\n props:{propH:{default:()=>[],type:Array,isRequired:true}}" } }, "provideMap": { "provideA": { "name": "provideA", "nameType": "Identifier", "value": "provideA", "valueType": "Identifier", "comment": " provideA注释1" }, "provideBName": { "name": "provideBName", "nameType": "Identifier", "value": "provideB", "valueType": "Identifier", "comment": " provideB注释1" }, "provideName": { "name": "provideName", "nameType": "Identifier", "value": "provideReactiveA", "valueType": "Identifier", "comment": " ProvideReactiveA注释" } }, "lifecycleHookMap": { "mounted": { "name": "mounted", "comment": " 生命周期" } }, "computedMap": { "computedA": { "name": "computedA", "comment": "get: computedA注释 get", "computedComment": "set: computedA注释 set" }, "computedPropA": { "name": "computedPropA", "comment": "all: PropSync注释1\n props:{propA:{default:0,type:Number,isRequired:true}}\n computed:{computedPropA:{get:this.propA,set:val=>this.$emit('update:propA',val)}}" }, "computedPropG": { "name": "computedPropG", "comment": "all: ModelSync注释1\n props:[propG]\n computed:{computedPropG:{get:this.propG,set:val=>this.$emit('change-g',val)}" } }, "emitMap": { "\"emit-a\"": { "name": "emit-a", "type": [["Number"], ["String"], ["String", "Number"], []], "comment": " emitA注释1\n emit('emit-a',10,n,m,o)\n emit('emit-a',Number,String,[String,Number],undefined)" }, "\"emit-b\"": { "name": "emit-b", "comment": " emitB注释1\n emit('emit-b')" }, "\"emit-c\"": { "name": "emit-c", "type": [["Number"]], "comment": " emitC注释1\n emit('emit-c',Number)" }, "\"emit-d\"": { "name": "emit-d", "type": [[], []], "comment": " emitD注释1\n emit('emit-d',e.target.value,e)\n emit('emit-d',undefined,undefined)" }, "input": { "name": "input", "type": [["String"]], "comment": " VModel注释1\n prop:{value:{default:'default',type:String,isRequired:true}}\n computed:{computedValue:{get:this.value,set:val=>this.$emit('input',val)}}" }, "\"update:propA\"": { "name": "\"update:propA\"", "type": [["Number"]], "comment": " PropSync注释1\n props:{propA:{default:0,type:Number,isRequired:true}}\n computed:{computedPropA:{get:this.propA,set:val=>this.$emit('update:propA',val)}}" }, "changeG": { "name": "changeG", "type": [["Array"]], "comment": " ModelSync注释1\n props:[propG]\n computed:{computedPropG:{get:this.propG,set:val=>this.$emit('change-g',val)}" } }, "dataMap": { "dataA": { "name": "dataA", "comment": " dataA注释" }, "provideA": { "name": "provideA", "comment": " data provideA\n provide:{provideA:this.provideA}" }, "provideB": { "name": "provideB", "comment": " data provideB\n provide:{provideBName:this.provideB}" }, "provideReactiveA": { "name": "provideReactiveA", "comment": " data:{provideReactiveA:'provideReactiveA'},provide:{provideName:this.provideReactiveA}" } }, "methodMap": { "methodA": { "name": "methodA", "comment": " methodA 注释" } }, "injectMap": { "injectA": { "name": "injectA", "from": "injectA", "fromType": "Literal", "comment": " InjectA注释1\n inject:{injectA:'injectA'}" }, "injectB": { "name": "injectB", "from": "\"injectBFrom\"", "fromType": "Literal", "defaultValue": "\"injectBDefault\"", "comment": " InjectB注释1\n inject:{injectB:{from:'injectBFrom',default:'injectBDefault'}}" }, "injectC": { "name": "injectC", "from": "\"injectCName\"", "fromType": "Literal", "comment": " InjectC注释1\n inject:{injectC:'injectCName'}" }, "injectD": { "name": "injectD", "from": "symbol", "fromType": "Identifier", "comment": " InjectD注释1\n inject:{injectD:symbol}" }, "injectReactiveA": { "name": "injectReactiveA", "from": "injectReactiveA", "fromType": "Literal", "comment": " InjectReactiveA注释\n inject:{injectReactiveA:'InjectReactiveAFrom'}" }, "injectReactiveB": { "name": "injectReactiveB", "from": "\"InjectReactiveBFrom\"", "fromType": "Literal", "comment": " InjectReactiveB注释\n inject:{injectReactiveB:'InjectReactiveBFrom'}" }, "injectReactiveC": { "name": "injectReactiveC", "from": "\"InjectReactiveCFrom\"", "fromType": "Literal", "defaultValue": "() => \"1\"", "comment": " InjectReactiveC注释\n inject:{injectReactiveC:{from:'InjectReactiveCFrom',default:()=>1}}}" } }, "modelOptionMap": { "prop": "propH", "event": "changeH" }, "mixinSet": [{ "modelOptionMap": { "prop": "value", "event": "input" } }] } }] }, { "path": "/setup-component", "component": { "template": { "template": "<template>", "type": "VElement", "comment": "", "children": [{ "template": "<div>", "type": "VElement", "comment": "", "children": [{ "template": "\" setup-component \"", "type": "VText", "comment": "" }, { "template": "<class-component2>", "type": "VElement", "comment": "" }] }] }, "propMap": { "propA": { "name": "propA", "type": ["String"], "isRequired": true, "comment": " propA注释" }, "propB": { "name": "propB", "defaultValue": "false", "type": ["Boolean"], "isRequired": true, "comment": " propB注释" }, "propC": { "name": "propC", "type": ["Boolean"], "comment": " propC注释" }, "propD": { "name": "propD", "type": ["String", "Number"], "comment": " propD注释" }, "propE": { "name": "propE", "defaultValue": "\"\"", "type": ["String"], "isRequired": true, "comment": " propE注释1\n 默认值注释" } }, "setupMap": { "dataA": { "name": "dataA", "comment": " dataA注释" }, "injectA": { "name": "injectA", "comment": " injectA注释" }, "injectB": { "name": "injectB", "comment": " injectB注释" }, "getDataB": { "name": "getDataB", "comment": " getDataB注释" }, "dataB": { "name": "dataB", "comment": " dataB注释" }, "getDataC": { "name": "getDataC", "comment": " getDataC注释" }, "dataC": { "name": "dataC", "comment": "" }, "computedA": { "name": "computedA", "comment": " 计算属性A注释" }, "computedB": { "name": "computedB", "comment": " 计算属性B注释" }, "dataD": { "name": "dataD", "comment": " dataD注释" }, "dataE": { "name": "dataE", "comment": "" }, "dataF": { "name": "dataF", "comment": " dataF注释" } }, "provideMap": { "provideName": { "name": "provideName", "nameType": "Literal", "value": "dataA", "valueType": "Identifier", "comment": " provide注释,provide:{provideName:dataA}\n 参数1可是字符串或symbol" } }, "lifecycleHookMap": { "onMounted": { "name": "onMounted", "comment": " 生命周期注释1\n 生命周期注释2" } }, "emitMap": { "emitA": { "name": "emitA", "comment": " emitA注释" }, "emitB": { "name": "emitB", "type": [["String", "Number"], ["String"]], "comment": " emitB注释\n type === emitB(value){return typeof value==='string'}", "paramsVerify": "emitB(value: string | number, value2: string) { return typeof value === \"string\" && value2; }" }, "emitC": { "name": "emitC", "type": [["String", "Number"], []], "comment": "", "paramsVerify": "(value: string | number, value2 = \"1\") => { return typeof value === \"string\" && value2; }" }, "emitD": { "name": "emitD", "type": [["String", "Number"], ["Number"]], "comment": " emit('emit-d',String | Number , Number)" } }, "modelOptionMap": { "prop": "value", "event": "input" }, "componentMap": { "class-component2": { "template": { "template": "<template>", "type": "VElement", "comment": "", "children": [{ "template": "<div>", "type": "VElement", "comment": "", "children": [{ "template": "\"class-component\"", "type": "VText", "comment": "" }] }] }, "propMap": { "value": { "name": "value", "defaultValue": "\"default\"", "type": ["String"], "isRequired": true, "comment": " VModel注释1\n prop:{value:{default:'default',type:String,isRequired:true}}\n computed:{computedValue:{get:this.value,set:val=>this.$emit('input',val)}}" }, "propA": { "name": "propA", "type": ["Number"], "isRequired": true, "comment": " PropA注释1\n PropA注释2" }, "propB": { "name": "propB", "type": ["Number"], "isRequired": true, "comment": " PropB注释1\n PropB注释2" }, "propC": { "name": "propC", "type": ["Number"], "isRequired": false, "comment": " PropC注释1\n {isRequired:false,type:Number}" }, "propD": { "name": "propD", "type": ["Array"], "isRequired": true, "comment": " {type:Array}" }, "propE": { "name": "propE", "type": ["Object"], "isRequired": true, "comment": " {type:Object}" }, "propF": { "name": "propF", "defaultValue": "() => { return []; }", "type": ["Array"], "isRequired": true, "comment": "" }, "propG": { "name": "propG", "defaultValue": "() => { return []; }", "type": ["Array"], "isRequired": true, "comment": " ModelSync注释1\n props:[propG]\n computed:{computedPropG:{get:this.propG,set:val=>this.$emit('change-g',val)}" }, "propH": { "name": "propH", "defaultValue": "() => { return []; }", "type": ["Array"], "isRequired": true, "comment": " Model注释1\n mode:{prop:'propH',event:'changeH'}\n props:{propH:{default:()=>[],type:Array,isRequired:true}}" } }, "provideMap": { "provideA": { "name": "provideA", "nameType": "Identifier", "value": "provideA", "valueType": "Identifier", "comment": " provideA注释1" }, "provideBName": { "name": "provideBName", "nameType": "Identifier", "value": "provideB", "valueType": "Identifier", "comment": " provideB注释1" }, "provideName": { "name": "provideName", "nameType": "Identifier", "value": "provideReactiveA", "valueType": "Identifier", "comment": " ProvideReactiveA注释" } }, "lifecycleHookMap": { "mounted": { "name": "mounted", "comment": " 生命周期" } }, "computedMap": { "computedA": { "name": "computedA", "comment": "get: computedA注释 get", "computedComment": "set: computedA注释 set" }, "computedPropA": { "name": "computedPropA", "comment": "all: PropSync注释1\n props:{propA:{default:0,type:Number,isRequired:true}}\n computed:{computedPropA:{get:this.propA,set:val=>this.$emit('update:propA',val)}}" }, "computedPropG": { "name": "computedPropG", "comment": "all: ModelSync注释1\n props:[propG]\n computed:{computedPropG:{get:this.propG,set:val=>this.$emit('change-g',val)}" } }, "emitMap": { "\"emit-a\"": { "name": "emit-a", "type": [["Number"], ["String"], ["String", "Number"], []], "comment": " emitA注释1\n emit('emit-a',10,n,m,o)\n emit('emit-a',Number,String,[String,Number],undefined)" }, "\"emit-b\"": { "name": "emit-b", "comment": " emitB注释1\n emit('emit-b')" }, "\"emit-c\"": { "name": "emit-c", "type": [["Number"]], "comment": " emitC注释1\n emit('emit-c',Number)" }, "\"emit-d\"": { "name": "emit-d", "type": [[], []], "comment": " emitD注释1\n emit('emit-d',e.target.value,e)\n emit('emit-d',undefined,undefined)" }, "input": { "name": "input", "type": [["String"]], "comment": " VModel注释1\n prop:{value:{default:'default',type:String,isRequired:true}}\n computed:{computedValue:{get:this.value,set:val=>this.$emit('input',val)}}" }, "\"update:propA\"": { "name": "\"update:propA\"", "type": [["Number"]], "comment": " PropSync注释1\n props:{propA:{default:0,type:Number,isRequired:true}}\n computed:{computedPropA:{get:this.propA,set:val=>this.$emit('update:propA',val)}}" }, "changeG": { "name": "changeG", "type": [["Array"]], "comment": " ModelSync注释1\n props:[propG]\n computed:{computedPropG:{get:this.propG,set:val=>this.$emit('change-g',val)}" } }, "dataMap": { "dataA": { "name": "dataA", "comment": " dataA注释" }, "provideA": { "name": "provideA", "comment": " data provideA\n provide:{provideA:this.provideA}" }, "provideB": { "name": "provideB", "comment": " data provideB\n provide:{provideBName:this.provideB}" }, "provideReactiveA": { "name": "provideReactiveA", "comment": " data:{provideReactiveA:'provideReactiveA'},provide:{provideName:this.provideReactiveA}" } }, "methodMap": { "methodA": { "name": "methodA", "comment": " methodA 注释" } }, "injectMap": { "injectA": { "name": "injectA", "from": "injectA", "fromType": "Literal", "comment": " InjectA注释1\n inject:{injectA:'injectA'}" }, "injectB": { "name": "injectB", "from": "\"injectBFrom\"", "fromType": "Literal", "defaultValue": "\"injectBDefault\"", "comment": " InjectB注释1\n inject:{injectB:{from:'injectBFrom',default:'injectBDefault'}}" }, "injectC": { "name": "injectC", "from": "\"injectCName\"", "fromType": "Literal", "comment": " InjectC注释1\n inject:{injectC:'injectCName'}" }, "injectD": { "name": "injectD", "from": "symbol", "fromType": "Identifier", "comment": " InjectD注释1\n inject:{injectD:symbol}" }, "injectReactiveA": { "name": "injectReactiveA", "from": "injectReactiveA", "fromType": "Literal", "comment": " InjectReactiveA注释\n inject:{injectReactiveA:'InjectReactiveAFrom'}" }, "injectReactiveB": { "name": "injectReactiveB", "from": "\"InjectReactiveBFrom\"", "fromType": "Literal", "comment": " InjectReactiveB注释\n inject:{injectReactiveB:'InjectReactiveBFrom'}" }, "injectReactiveC": { "name": "injectReactiveC", "from": "\"InjectReactiveCFrom\"", "fromType": "Literal", "defaultValue": "() => \"1\"", "comment": " InjectReactiveC注释\n inject:{injectReactiveC:{from:'InjectReactiveCFrom',default:()=>1}}}" } }, "modelOptionMap": { "prop": "propH", "event": "changeH" }, "mixinSet": [{ "modelOptionMap": { "prop": "value", "event": "input" } }] } } } }]
export default routes